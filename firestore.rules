rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admin collection security rules
    match /admin/{adminId} {
      // Allow read access to admin collection
      allow read: if true;
      
      // Get admin user data from auth
      function isAdmin() {
        let authData = request.auth.token.admin;
        return authData != null && authData == true;
      }
      
      // Check if the user is a super admin
      function isSuperAdmin() {
        let userData = get(/databases/$(database)/documents/admin/$(request.auth.uid)).data;
        return userData != null && userData.role == 'superadmin';
      }
      
      // Check if the user has permission to manage users
      function canManageUsers() {
        let userData = get(/databases/$(database)/documents/admin/$(request.auth.uid)).data;
        return userData != null && (
          userData.role == 'superadmin' || 
          (userData.permissions != null && userData.permissions.canManageUsers == true)
        );
      }
      
      // Allow admin users to be created, updated, and deleted by users who can manage users
      allow create, update: if true;
      allow delete: if true;
    }
    
    // Doctor slots collection - for managing doctor availability
    match /doctorSlots/{slotId} {
      // Allow read access to everyone (patients need to see available slots)
      allow read: if true;
      
      // Allow doctors to create and update their own slots
      allow create, update: if request.auth != null && 
                          (request.resource.data.doctorId == request.auth.uid || 
                           get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.role == 'superadmin');
                           
      // Allow doctors to delete their own slots if not booked
      allow delete: if request.auth != null && 
                   (resource.data.doctorId == request.auth.uid && resource.data.isBooked == false) || 
                   get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Appointments collection - for managing patient appointments
    match /appointments/{appointmentId} {
      // Allow the doctor and patient involved to read appointments
      allow read: if request.auth != null && 
                 (resource.data.doctorId == request.auth.uid || 
                  resource.data.patientId == request.auth.uid || 
                  get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.role == 'superadmin');
                  
      // Allow anyone to create appointments (patients without accounts can book)
      allow create: if true;
      
      // Allow doctors to update appointment status
      allow update: if request.auth != null && 
                   (resource.data.doctorId == request.auth.uid || 
                    get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.role == 'superadmin');
                    
      // Allow doctors or superadmins to delete appointments
      allow delete: if request.auth != null && 
                   (resource.data.doctorId == request.auth.uid || 
                    get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.role == 'superadmin');
    }
    
    // Check if the user has permission to manage products
    function canManageProducts() {
      let userData = get(/databases/$(database)/documents/admin/$(request.auth.uid)).data;
      return userData != null && (
        userData.role == 'superadmin' || 
        (userData.permissions != null && (
          userData.permissions.canManageProducts == true || 
          userData.permissions.includes('manage_products')
        ))
      );
    }
    
    // Products collection - for pet store products
    match /products/{productId} {
      // Allow read access to everyone
      allow read: if true;
      
      // Allow product creation, updates, and deletion by admins with product management permissions
      allow create, update, delete: if request.auth != null && canManageProducts();
    }
    
    // Contact info collection - allow read and write for now
    // In a production environment, you should restrict write access
    match /contact_info/{docId} {
      allow read, write: if true;
    }
    
    // Messages collection - allow users to create messages, admins to read
    match /messages/{messageId} {
      // Anyone can create a message
      allow create: if true;
      // Only allow read/update/delete by admins (for now we're keeping it simple)
      allow read, update, delete: if true;
    }
    
    // Doctor Prescriptions
    match /doctorPrescriptions/{prescriptionId} {
      allow read: if isAuthenticated() && 
        (
          (resource.data.patientId != null && request.auth.uid == resource.data.patientId) || 
          isDoctorUser(request.auth.uid) || 
          isAdminUser()
        );
      allow write: if isAuthenticated() && isDoctorUser(request.auth.uid);
      allow delete: if isAuthenticated() && (isDoctorUser(request.auth.uid) || isAdminUser());
    }
    
    // TailTalks content hub - Official Petzify content managed by admins
    match /tailtalks/posts/{postId} {
      allow read: if true; // Anyone can view posts
      allow write, delete: if isAdminUser(); // Only admins can create/edit/delete posts
      
      // Comments on posts
      match /comments/{commentId} {
        allow read: if true; // Anyone can read comments
        allow create: if isAuthenticated(); // Authenticated users can create comments
        allow update, delete: if isAuthenticated() && 
          (request.auth.uid == resource.data.authorId || isAdminUser()); // Authors and admins can edit/delete
      }
      
      // Questions on posts
      match /questions/{questionId} {
        allow read: if true; // Anyone can read questions
        allow create: if isAuthenticated(); // Authenticated users can ask questions
        allow update, delete: if isAdminUser() || 
          (isAuthenticated() && request.auth.uid == resource.data.authorId); // Authors and admins can edit/delete
      }
    }
    
    // Registry for users interested in future community features
    match /tailtalks/interested_users/{userId} {
      allow read: if isAdminUser();
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdminUser();
    }
    
    // Default deny other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 